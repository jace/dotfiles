#!/bin/bash

# Lesspipe filter.
# Only attempt to render better than lesspipe's defaults

if [[ -z "$1" ]]; then
  # Don't process stdin
  exit 1
fi

# Check for all commands required to process
has_cmd() {
  for opt in "$@"; do
    if command -v "$opt" >/dev/null; then
      continue
    else
      return $?
    fi
  done
}

# Map batcat to bat
if ! has_cmd bat && has_cmd batcat; then
  alias bat=batcat
fi

# Set $COLUMNS and $LINES from FZF preview size or terminal size
COLUMNS="${FZF_PREVIEW_COLUMNS:-$COLUMNS}"
LINES="${FZF_PREVIEW_LINES:-$LINES}"
if [ -z "$COLUMNS" ] || [ -z "$LINES" ]; then
  if has_cmd stty; then
    read LINES COLUMNS <<<$(stty size)
  elif has_cmd tput; then
    LINES=$(tput lines)
    COLUMNS=$(tput cols)
  else
    LINES=25
    COLUMNS=80
  fi
fi
# Discover terminal's colour depth
# https://github.com/termstandard/colors
if [[ $COLORTERM =~ ^(truecolor|24bit)$ ]] || [[ $TERM =~ ^(iterm|linux-truecolor|screen-truecolor|tmux-truecolor|xterm-truecolor) ]]; then
  color_depth=24
else
  color_depth=8
fi

# Start analysis. Is this a directory?
if [[ -d "$1" ]]; then
  if [[ "$COLUMNS" -lt 80 ]]; then
    # Narrow screen, use -1 instead of -l
    ls_flags="-1AF"
  else
    ls_flags="-lAF"
  fi
  if has_cmd eza; then
    eza $ls_flags --git --color=always --icons=always -- "$1" && exit || exit 1
  elif has_cmd lsd; then
    lsd $ls_flags -git --color=always --icon=always -- "$1" && exit || exit 1
  else
    ls $ls_flags --color=always -- "$1" && exit || exit 1
  fi
fi

# Is this a file?
if [[ -f "$1" ]]; then
  # Examine file for type (this can return multiple lines for macOS universal binaries, so limit to first)
  mime=$(file -Lb --mime-type "$1" | head -1)
  category=${mime%%/*}
  kind=${mime##*/}
  ext=${1##*.}

  if [[ "$mime" == "application/pdf" ]]; then
    if has_cmd timg; then
      timg -pq "-g${COLUMNS}x${LINES}" -- "$1" && exit || exit 1
    fi
    exit 1
  elif [[ "$mime" == "application/vnd.sqlite3" ]]; then
    if has_cmd sqlite3 bat; then
      echo -e '.schema\n.dump\n.q' | sqlite3 -- "$1" | bat --color always --terminal-width "$COLUMNS" -Ppl sql && exit || exit 1
    fi
    exit 1
  elif [[ "$ext" == "ipynb" ]] && has_cmd euporie-preview; then
    euporie-preview --color-depth "$color_depth" --color-scheme default -- "$1" && exit || exit 1
  elif [[ "$ext" == "ipynb" ]] && has_cmd rich; then
    rich --force-terminal -- "$1" && exit || exit 1
  elif [[ "$category" == "image" ]]; then
    if [[ "$kind" != "heic" ]] && has_cmd chafa; then
      chafa -f symbols "--view-size=${COLUMNS}x${LINES}" -- "$1" && exit || exit 1
    elif has_cmd timg; then
      timg -pq "-g${COLUMNS}x${LINES}" --loops=1 --frames=1 -- "$1" && exit || exit 1
    elif has_cmd exiftool bat; then
      exiftool -- "$1" | bat --color always --terminal-width "$COLUMNS" -Ppl yaml && exit || exit 1
    fi
    exit 1
  elif [[ "$category" == "video" ]]; then
    if has_cmd timg; then
      timg -pq "-g${COLUMNS}x${LINES}" --loops=1 --frames=1 -- "$1" && exit || exit 1
    elif has_cmd exiftool bat; then
      exiftool -- "$1" | bat --color always --terminal-width "$COLUMNS" -Ppl yaml && exit || exit 1
    fi
    exit 1
  elif [[ "$ext" == "docx" ]] && has_cmd doxx; then
    if has_cmd glow; then
      doxx --export markdown -- "$1" | CLICOLOR_FORCE=1 glow -s dark -w "$COLUMNS" - && exit || exit 1
    elif has_cmd mdless; then
      doxx --export markdown -- "$1" | mdless -cP -w "$COLUMNS" && exit || exit 1
    elif has_cmd bat; then
      doxx --export markdown -- "$1" | bat --color always --terminal-width "$COLUMNS" -Ppl markdown && exit || exit 1
    else
      doxx --export markdown -- "$1" && exit || exit 1
    fi
  elif [[ "$category" == "text" ]]; then
    if [[ "$ext" == "md" ]]; then
      if has_cmd glow; then
        # https://github.com/charmbracelet/glow/issues/654
        CLICOLOR_FORCE=1 glow -s dark -w "$COLUMNS" -- "$1" && exit || exit 1
      elif has_cmd mdless; then
        mdless -c -P -w "$COLUMNS" --images=local -- "$1" && exit || exit 1
      elif has_cmd rich; then
        rich --force-terminal -- "$1" && exit || exit 1
      fi
      # No Markdown renderer? Process as plain text
    fi
    # Unknown text, defer to bat if available.
    # Modern lesspipe will also use bat, but Debian 12 ships an older version
    if has_cmd bat; then
      bat -Pp --color always --terminal-width "$COLUMNS" -- "$1" && exit || exit 1
    else
      exit 1
    fi
  fi
  # Not text, image, video or PDF. Try fq
  # TODO: Restrict fq to specific mime types
  #if has_cmd fq; then
  #  fq -C -- display "$1" 2>/dev/null && exit || exit 1
  #fi
  # Nothing available for this file
  exit 1
fi

# Not a file
exit 1
